/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace WithdrawalLib {
  export type WithdrawalStruct = {
    recipient: AddressLike;
    tokenIndex: BigNumberish;
    amount: BigNumberish;
    nullifier: BytesLike;
  };

  export type WithdrawalStructOutput = [
    recipient: string,
    tokenIndex: bigint,
    amount: bigint,
    nullifier: string
  ] & {
    recipient: string;
    tokenIndex: bigint;
    amount: bigint;
    nullifier: string;
  };
}

export declare namespace AllocationLib {
  export type AllocationConstantsStruct = {
    startTimestamp: BigNumberish;
    periodInterval: BigNumberish;
    genesisTimestamp: BigNumberish;
    phase0RewardPerDay: BigNumberish;
    numPhases: BigNumberish;
    phase0Period: BigNumberish;
  };

  export type AllocationConstantsStructOutput = [
    startTimestamp: bigint,
    periodInterval: bigint,
    genesisTimestamp: bigint,
    phase0RewardPerDay: bigint,
    numPhases: bigint,
    phase0Period: bigint
  ] & {
    startTimestamp: bigint;
    periodInterval: bigint;
    genesisTimestamp: bigint;
    phase0RewardPerDay: bigint;
    numPhases: bigint;
    phase0Period: bigint;
  };

  export type AllocationInfoStruct = {
    totalContribution: BigNumberish;
    allocationPerPeriod: BigNumberish;
    userContribution: BigNumberish;
    userAllocation: BigNumberish;
  };

  export type AllocationInfoStructOutput = [
    totalContribution: bigint,
    allocationPerPeriod: bigint,
    userContribution: bigint,
    userAllocation: bigint
  ] & {
    totalContribution: bigint;
    allocationPerPeriod: bigint;
    userContribution: bigint;
    userAllocation: bigint;
  };
}

export declare namespace ChainedClaimLib {
  export type ChainedClaimStruct = {
    recipient: AddressLike;
    amount: BigNumberish;
    nullifier: BytesLike;
    blockHash: BytesLike;
    blockNumber: BigNumberish;
  };

  export type ChainedClaimStructOutput = [
    recipient: string,
    amount: bigint,
    nullifier: string,
    blockHash: string,
    blockNumber: bigint
  ] & {
    recipient: string;
    amount: bigint;
    nullifier: string;
    blockHash: string;
    blockNumber: bigint;
  };
}

export declare namespace ClaimProofPublicInputsLib {
  export type ClaimProofPublicInputsStruct = {
    lastClaimHash: BytesLike;
    claimAggregator: AddressLike;
  };

  export type ClaimProofPublicInputsStructOutput = [
    lastClaimHash: string,
    claimAggregator: string
  ] & { lastClaimHash: string; claimAggregator: string };
}

export interface ClaimInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "UPGRADE_INTERFACE_VERSION"
      | "getAllocationConstants"
      | "getAllocationInfo"
      | "getCurrentPeriod"
      | "initialize"
      | "owner"
      | "proxiableUUID"
      | "relayClaims"
      | "renounceOwnership"
      | "submitClaimProof"
      | "transferOwnership"
      | "upgradeToAndCall"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ContributionRecorded"
      | "DirectWithdrawalQueued"
      | "Initialized"
      | "OwnershipTransferred"
      | "Upgraded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllocationConstants",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllocationInfo",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "relayClaims",
    values: [BigNumberish, AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "submitClaimProof",
    values: [
      ChainedClaimLib.ChainedClaimStruct[],
      ClaimProofPublicInputsLib.ClaimProofPublicInputsStruct,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllocationConstants",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllocationInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "relayClaims",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitClaimProof",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
}

export namespace ContributionRecordedEvent {
  export type InputTuple = [
    period: BigNumberish,
    recipient: AddressLike,
    depositAmount: BigNumberish,
    contribution: BigNumberish
  ];
  export type OutputTuple = [
    period: bigint,
    recipient: string,
    depositAmount: bigint,
    contribution: bigint
  ];
  export interface OutputObject {
    period: bigint;
    recipient: string;
    depositAmount: bigint;
    contribution: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DirectWithdrawalQueuedEvent {
  export type InputTuple = [
    withdrawalHash: BytesLike,
    recipient: AddressLike,
    withdrawal: WithdrawalLib.WithdrawalStruct
  ];
  export type OutputTuple = [
    withdrawalHash: string,
    recipient: string,
    withdrawal: WithdrawalLib.WithdrawalStructOutput
  ];
  export interface OutputObject {
    withdrawalHash: string;
    recipient: string;
    withdrawal: WithdrawalLib.WithdrawalStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Claim extends BaseContract {
  connect(runner?: ContractRunner | null): Claim;
  waitForDeployment(): Promise<this>;

  interface: ClaimInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  UPGRADE_INTERFACE_VERSION: TypedContractMethod<[], [string], "view">;

  getAllocationConstants: TypedContractMethod<
    [],
    [AllocationLib.AllocationConstantsStructOutput],
    "view"
  >;

  getAllocationInfo: TypedContractMethod<
    [periodNumber: BigNumberish, user: AddressLike],
    [AllocationLib.AllocationInfoStructOutput],
    "view"
  >;

  getCurrentPeriod: TypedContractMethod<[], [bigint], "view">;

  initialize: TypedContractMethod<
    [
      _admin: AddressLike,
      _scrollMessenger: AddressLike,
      _claimVerifier: AddressLike,
      _liquidity: AddressLike,
      _rollup: AddressLike,
      _contribution: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  proxiableUUID: TypedContractMethod<[], [string], "view">;

  relayClaims: TypedContractMethod<
    [period: BigNumberish, users: AddressLike[]],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  submitClaimProof: TypedContractMethod<
    [
      claims: ChainedClaimLib.ChainedClaimStruct[],
      publicInputs: ClaimProofPublicInputsLib.ClaimProofPublicInputsStruct,
      proof: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "UPGRADE_INTERFACE_VERSION"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getAllocationConstants"
  ): TypedContractMethod<
    [],
    [AllocationLib.AllocationConstantsStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAllocationInfo"
  ): TypedContractMethod<
    [periodNumber: BigNumberish, user: AddressLike],
    [AllocationLib.AllocationInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCurrentPeriod"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      _admin: AddressLike,
      _scrollMessenger: AddressLike,
      _claimVerifier: AddressLike,
      _liquidity: AddressLike,
      _rollup: AddressLike,
      _contribution: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "proxiableUUID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "relayClaims"
  ): TypedContractMethod<
    [period: BigNumberish, users: AddressLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "submitClaimProof"
  ): TypedContractMethod<
    [
      claims: ChainedClaimLib.ChainedClaimStruct[],
      publicInputs: ClaimProofPublicInputsLib.ClaimProofPublicInputsStruct,
      proof: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "upgradeToAndCall"
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  getEvent(
    key: "ContributionRecorded"
  ): TypedContractEvent<
    ContributionRecordedEvent.InputTuple,
    ContributionRecordedEvent.OutputTuple,
    ContributionRecordedEvent.OutputObject
  >;
  getEvent(
    key: "DirectWithdrawalQueued"
  ): TypedContractEvent<
    DirectWithdrawalQueuedEvent.InputTuple,
    DirectWithdrawalQueuedEvent.OutputTuple,
    DirectWithdrawalQueuedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;

  filters: {
    "ContributionRecorded(uint256,address,uint256,uint256)": TypedContractEvent<
      ContributionRecordedEvent.InputTuple,
      ContributionRecordedEvent.OutputTuple,
      ContributionRecordedEvent.OutputObject
    >;
    ContributionRecorded: TypedContractEvent<
      ContributionRecordedEvent.InputTuple,
      ContributionRecordedEvent.OutputTuple,
      ContributionRecordedEvent.OutputObject
    >;

    "DirectWithdrawalQueued(bytes32,address,tuple)": TypedContractEvent<
      DirectWithdrawalQueuedEvent.InputTuple,
      DirectWithdrawalQueuedEvent.OutputTuple,
      DirectWithdrawalQueuedEvent.OutputObject
    >;
    DirectWithdrawalQueued: TypedContractEvent<
      DirectWithdrawalQueuedEvent.InputTuple,
      DirectWithdrawalQueuedEvent.OutputTuple,
      DirectWithdrawalQueuedEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
  };
}
