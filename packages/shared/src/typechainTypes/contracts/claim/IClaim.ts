/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace WithdrawalLib {
  export type WithdrawalStruct = {
    recipient: AddressLike;
    tokenIndex: BigNumberish;
    amount: BigNumberish;
    nullifier: BytesLike;
  };

  export type WithdrawalStructOutput = [
    recipient: string,
    tokenIndex: bigint,
    amount: bigint,
    nullifier: string
  ] & {
    recipient: string;
    tokenIndex: bigint;
    amount: bigint;
    nullifier: string;
  };
}

export declare namespace ChainedClaimLib {
  export type ChainedClaimStruct = {
    recipient: AddressLike;
    amount: BigNumberish;
    nullifier: BytesLike;
    blockHash: BytesLike;
    blockNumber: BigNumberish;
  };

  export type ChainedClaimStructOutput = [
    recipient: string,
    amount: bigint,
    nullifier: string,
    blockHash: string,
    blockNumber: bigint
  ] & {
    recipient: string;
    amount: bigint;
    nullifier: string;
    blockHash: string;
    blockNumber: bigint;
  };
}

export declare namespace ClaimProofPublicInputsLib {
  export type ClaimProofPublicInputsStruct = {
    lastClaimHash: BytesLike;
    claimAggregator: AddressLike;
  };

  export type ClaimProofPublicInputsStructOutput = [
    lastClaimHash: string,
    claimAggregator: string
  ] & { lastClaimHash: string; claimAggregator: string };
}

export interface IClaimInterface extends Interface {
  getFunction(
    nameOrSignature: "relayClaims" | "submitClaimProof"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "DirectWithdrawalQueued"): EventFragment;

  encodeFunctionData(
    functionFragment: "relayClaims",
    values: [BigNumberish, AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "submitClaimProof",
    values: [
      ChainedClaimLib.ChainedClaimStruct[],
      ClaimProofPublicInputsLib.ClaimProofPublicInputsStruct,
      BytesLike
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "relayClaims",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitClaimProof",
    data: BytesLike
  ): Result;
}

export namespace DirectWithdrawalQueuedEvent {
  export type InputTuple = [
    withdrawalHash: BytesLike,
    recipient: AddressLike,
    withdrawal: WithdrawalLib.WithdrawalStruct
  ];
  export type OutputTuple = [
    withdrawalHash: string,
    recipient: string,
    withdrawal: WithdrawalLib.WithdrawalStructOutput
  ];
  export interface OutputObject {
    withdrawalHash: string;
    recipient: string;
    withdrawal: WithdrawalLib.WithdrawalStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IClaim extends BaseContract {
  connect(runner?: ContractRunner | null): IClaim;
  waitForDeployment(): Promise<this>;

  interface: IClaimInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  relayClaims: TypedContractMethod<
    [period: BigNumberish, users: AddressLike[]],
    [void],
    "nonpayable"
  >;

  submitClaimProof: TypedContractMethod<
    [
      claims: ChainedClaimLib.ChainedClaimStruct[],
      publicInputs: ClaimProofPublicInputsLib.ClaimProofPublicInputsStruct,
      proof: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "relayClaims"
  ): TypedContractMethod<
    [period: BigNumberish, users: AddressLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "submitClaimProof"
  ): TypedContractMethod<
    [
      claims: ChainedClaimLib.ChainedClaimStruct[],
      publicInputs: ClaimProofPublicInputsLib.ClaimProofPublicInputsStruct,
      proof: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "DirectWithdrawalQueued"
  ): TypedContractEvent<
    DirectWithdrawalQueuedEvent.InputTuple,
    DirectWithdrawalQueuedEvent.OutputTuple,
    DirectWithdrawalQueuedEvent.OutputObject
  >;

  filters: {
    "DirectWithdrawalQueued(bytes32,address,tuple)": TypedContractEvent<
      DirectWithdrawalQueuedEvent.InputTuple,
      DirectWithdrawalQueuedEvent.OutputTuple,
      DirectWithdrawalQueuedEvent.OutputObject
    >;
    DirectWithdrawalQueued: TypedContractEvent<
      DirectWithdrawalQueuedEvent.InputTuple,
      DirectWithdrawalQueuedEvent.OutputTuple,
      DirectWithdrawalQueuedEvent.OutputObject
    >;
  };
}
