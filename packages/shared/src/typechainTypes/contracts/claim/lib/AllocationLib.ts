/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface AllocationLibInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "GENESIS_TIMESTAMP"
      | "NUM_PHASES"
      | "PHASE0_PERIOD"
      | "PHASE0_REWARD_PER_DAY"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "ContributionRecorded"): EventFragment;

  encodeFunctionData(
    functionFragment: "GENESIS_TIMESTAMP",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "NUM_PHASES",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PHASE0_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PHASE0_REWARD_PER_DAY",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "GENESIS_TIMESTAMP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "NUM_PHASES", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "PHASE0_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PHASE0_REWARD_PER_DAY",
    data: BytesLike
  ): Result;
}

export namespace ContributionRecordedEvent {
  export type InputTuple = [
    period: BigNumberish,
    recipient: AddressLike,
    depositAmount: BigNumberish,
    contribution: BigNumberish
  ];
  export type OutputTuple = [
    period: bigint,
    recipient: string,
    depositAmount: bigint,
    contribution: bigint
  ];
  export interface OutputObject {
    period: bigint;
    recipient: string;
    depositAmount: bigint;
    contribution: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AllocationLib extends BaseContract {
  connect(runner?: ContractRunner | null): AllocationLib;
  waitForDeployment(): Promise<this>;

  interface: AllocationLibInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  GENESIS_TIMESTAMP: TypedContractMethod<[], [bigint], "view">;

  NUM_PHASES: TypedContractMethod<[], [bigint], "view">;

  PHASE0_PERIOD: TypedContractMethod<[], [bigint], "view">;

  PHASE0_REWARD_PER_DAY: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "GENESIS_TIMESTAMP"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "NUM_PHASES"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "PHASE0_PERIOD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "PHASE0_REWARD_PER_DAY"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "ContributionRecorded"
  ): TypedContractEvent<
    ContributionRecordedEvent.InputTuple,
    ContributionRecordedEvent.OutputTuple,
    ContributionRecordedEvent.OutputObject
  >;

  filters: {
    "ContributionRecorded(uint256,address,uint256,uint256)": TypedContractEvent<
      ContributionRecordedEvent.InputTuple,
      ContributionRecordedEvent.OutputTuple,
      ContributionRecordedEvent.OutputObject
    >;
    ContributionRecorded: TypedContractEvent<
      ContributionRecordedEvent.InputTuple,
      ContributionRecordedEvent.OutputTuple,
      ContributionRecordedEvent.OutputObject
    >;
  };
}
