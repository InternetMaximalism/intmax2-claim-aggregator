/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
// biome-ignore lint: shared typechain file
import type {
  AddressLike,
  BaseContract,
  BigNumberish,
  BytesLike,
  ContractMethod,
  ContractRunner,
  EventFragment,
  FunctionFragment,
  Interface,
  Listener,
  Result,
} from "ethers";
import type {
  TypedContractEvent,
  TypedContractMethod,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedLogDescription,
} from "../../common";

export declare namespace WithdrawalLib {
  export type WithdrawalStruct = {
    recipient: AddressLike;
    tokenIndex: BigNumberish;
    amount: BigNumberish;
    nullifier: BytesLike;
  };

  export type WithdrawalStructOutput = [
    recipient: string,
    tokenIndex: bigint,
    amount: bigint,
    nullifier: string,
  ] & {
    recipient: string;
    tokenIndex: bigint;
    amount: bigint;
    nullifier: string;
  };
}

export declare namespace ChainedWithdrawalLib {
  export type ChainedWithdrawalStruct = {
    recipient: AddressLike;
    tokenIndex: BigNumberish;
    amount: BigNumberish;
    nullifier: BytesLike;
    blockHash: BytesLike;
    blockNumber: BigNumberish;
  };

  export type ChainedWithdrawalStructOutput = [
    recipient: string,
    tokenIndex: bigint,
    amount: bigint,
    nullifier: string,
    blockHash: string,
    blockNumber: bigint,
  ] & {
    recipient: string;
    tokenIndex: bigint;
    amount: bigint;
    nullifier: string;
    blockHash: string;
    blockNumber: bigint;
  };
}

export declare namespace WithdrawalProofPublicInputsLib {
  export type WithdrawalProofPublicInputsStruct = {
    lastWithdrawalHash: BytesLike;
    withdrawalAggregator: AddressLike;
  };

  export type WithdrawalProofPublicInputsStructOutput = [
    lastWithdrawalHash: string,
    withdrawalAggregator: string,
  ] & { lastWithdrawalHash: string; withdrawalAggregator: string };
}

export interface IWithdrawalInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addDirectWithdrawalTokenIndices"
      | "getDirectWithdrawalTokenIndices"
      | "removeDirectWithdrawalTokenIndices"
      | "submitWithdrawalProof",
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ClaimableWithdrawalQueued"
      | "DirectWithdrawalQueued"
      | "DirectWithdrawalTokenIndicesAdded"
      | "DirectWithdrawalTokenIndicesRemoved",
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addDirectWithdrawalTokenIndices",
    values: [BigNumberish[]],
  ): string;
  encodeFunctionData(
    functionFragment: "getDirectWithdrawalTokenIndices",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "removeDirectWithdrawalTokenIndices",
    values: [BigNumberish[]],
  ): string;
  encodeFunctionData(
    functionFragment: "submitWithdrawalProof",
    values: [
      ChainedWithdrawalLib.ChainedWithdrawalStruct[],
      WithdrawalProofPublicInputsLib.WithdrawalProofPublicInputsStruct,
      BytesLike,
    ],
  ): string;

  decodeFunctionResult(
    functionFragment: "addDirectWithdrawalTokenIndices",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDirectWithdrawalTokenIndices",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeDirectWithdrawalTokenIndices",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "submitWithdrawalProof", data: BytesLike): Result;
}

export namespace ClaimableWithdrawalQueuedEvent {
  export type InputTuple = [
    withdrawalHash: BytesLike,
    recipient: AddressLike,
    withdrawal: WithdrawalLib.WithdrawalStruct,
  ];
  export type OutputTuple = [
    withdrawalHash: string,
    recipient: string,
    withdrawal: WithdrawalLib.WithdrawalStructOutput,
  ];
  export interface OutputObject {
    withdrawalHash: string;
    recipient: string;
    withdrawal: WithdrawalLib.WithdrawalStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DirectWithdrawalQueuedEvent {
  export type InputTuple = [
    withdrawalHash: BytesLike,
    recipient: AddressLike,
    withdrawal: WithdrawalLib.WithdrawalStruct,
  ];
  export type OutputTuple = [
    withdrawalHash: string,
    recipient: string,
    withdrawal: WithdrawalLib.WithdrawalStructOutput,
  ];
  export interface OutputObject {
    withdrawalHash: string;
    recipient: string;
    withdrawal: WithdrawalLib.WithdrawalStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DirectWithdrawalTokenIndicesAddedEvent {
  export type InputTuple = [tokenIndices: BigNumberish[]];
  export type OutputTuple = [tokenIndices: bigint[]];
  export interface OutputObject {
    tokenIndices: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DirectWithdrawalTokenIndicesRemovedEvent {
  export type InputTuple = [tokenIndices: BigNumberish[]];
  export type OutputTuple = [tokenIndices: bigint[]];
  export interface OutputObject {
    tokenIndices: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IWithdrawal extends BaseContract {
  connect(runner?: ContractRunner | null): IWithdrawal;
  waitForDeployment(): Promise<this>;

  interface: IWithdrawalInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent,
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;

  addDirectWithdrawalTokenIndices: TypedContractMethod<
    [tokenIndices: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  getDirectWithdrawalTokenIndices: TypedContractMethod<[], [bigint[]], "view">;

  removeDirectWithdrawalTokenIndices: TypedContractMethod<
    [tokenIndices: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  submitWithdrawalProof: TypedContractMethod<
    [
      withdrawals: ChainedWithdrawalLib.ChainedWithdrawalStruct[],
      publicInputs: WithdrawalProofPublicInputsLib.WithdrawalProofPublicInputsStruct,
      proof: BytesLike,
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

  getFunction(
    nameOrSignature: "addDirectWithdrawalTokenIndices",
  ): TypedContractMethod<[tokenIndices: BigNumberish[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getDirectWithdrawalTokenIndices",
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "removeDirectWithdrawalTokenIndices",
  ): TypedContractMethod<[tokenIndices: BigNumberish[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "submitWithdrawalProof",
  ): TypedContractMethod<
    [
      withdrawals: ChainedWithdrawalLib.ChainedWithdrawalStruct[],
      publicInputs: WithdrawalProofPublicInputsLib.WithdrawalProofPublicInputsStruct,
      proof: BytesLike,
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "ClaimableWithdrawalQueued",
  ): TypedContractEvent<
    ClaimableWithdrawalQueuedEvent.InputTuple,
    ClaimableWithdrawalQueuedEvent.OutputTuple,
    ClaimableWithdrawalQueuedEvent.OutputObject
  >;
  getEvent(
    key: "DirectWithdrawalQueued",
  ): TypedContractEvent<
    DirectWithdrawalQueuedEvent.InputTuple,
    DirectWithdrawalQueuedEvent.OutputTuple,
    DirectWithdrawalQueuedEvent.OutputObject
  >;
  getEvent(
    key: "DirectWithdrawalTokenIndicesAdded",
  ): TypedContractEvent<
    DirectWithdrawalTokenIndicesAddedEvent.InputTuple,
    DirectWithdrawalTokenIndicesAddedEvent.OutputTuple,
    DirectWithdrawalTokenIndicesAddedEvent.OutputObject
  >;
  getEvent(
    key: "DirectWithdrawalTokenIndicesRemoved",
  ): TypedContractEvent<
    DirectWithdrawalTokenIndicesRemovedEvent.InputTuple,
    DirectWithdrawalTokenIndicesRemovedEvent.OutputTuple,
    DirectWithdrawalTokenIndicesRemovedEvent.OutputObject
  >;

  filters: {
    "ClaimableWithdrawalQueued(bytes32,address,tuple)": TypedContractEvent<
      ClaimableWithdrawalQueuedEvent.InputTuple,
      ClaimableWithdrawalQueuedEvent.OutputTuple,
      ClaimableWithdrawalQueuedEvent.OutputObject
    >;
    ClaimableWithdrawalQueued: TypedContractEvent<
      ClaimableWithdrawalQueuedEvent.InputTuple,
      ClaimableWithdrawalQueuedEvent.OutputTuple,
      ClaimableWithdrawalQueuedEvent.OutputObject
    >;

    "DirectWithdrawalQueued(bytes32,address,tuple)": TypedContractEvent<
      DirectWithdrawalQueuedEvent.InputTuple,
      DirectWithdrawalQueuedEvent.OutputTuple,
      DirectWithdrawalQueuedEvent.OutputObject
    >;
    DirectWithdrawalQueued: TypedContractEvent<
      DirectWithdrawalQueuedEvent.InputTuple,
      DirectWithdrawalQueuedEvent.OutputTuple,
      DirectWithdrawalQueuedEvent.OutputObject
    >;

    "DirectWithdrawalTokenIndicesAdded(uint256[])": TypedContractEvent<
      DirectWithdrawalTokenIndicesAddedEvent.InputTuple,
      DirectWithdrawalTokenIndicesAddedEvent.OutputTuple,
      DirectWithdrawalTokenIndicesAddedEvent.OutputObject
    >;
    DirectWithdrawalTokenIndicesAdded: TypedContractEvent<
      DirectWithdrawalTokenIndicesAddedEvent.InputTuple,
      DirectWithdrawalTokenIndicesAddedEvent.OutputTuple,
      DirectWithdrawalTokenIndicesAddedEvent.OutputObject
    >;

    "DirectWithdrawalTokenIndicesRemoved(uint256[])": TypedContractEvent<
      DirectWithdrawalTokenIndicesRemovedEvent.InputTuple,
      DirectWithdrawalTokenIndicesRemovedEvent.OutputTuple,
      DirectWithdrawalTokenIndicesRemovedEvent.OutputObject
    >;
    DirectWithdrawalTokenIndicesRemoved: TypedContractEvent<
      DirectWithdrawalTokenIndicesRemovedEvent.InputTuple,
      DirectWithdrawalTokenIndicesRemovedEvent.OutputTuple,
      DirectWithdrawalTokenIndicesRemovedEvent.OutputObject
    >;
  };
}
