/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../common";
import type {
  AllocationLib,
  AllocationLibInterface,
} from "../../../../contracts/claim/lib/AllocationLib";

const _abi = [
  {
    inputs: [],
    name: "InvalidDepositAmount",
    type: "error",
  },
  {
    inputs: [],
    name: "NotFinishedPeriod",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "period",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "depositAmount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "contribution",
        type: "uint256",
      },
    ],
    name: "ContributionRecorded",
    type: "event",
  },
  {
    inputs: [],
    name: "GENESIS_TIMESTAMP",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "NUM_PHASES",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "PHASE0_PERIOD",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "PHASE0_REWARD_PER_DAY",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60c7610038600b82828239805160001a607314602b57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361060515760003560e01c80630c204d44146056578063b8e50054146072578063c52f4124146083578063eb9f1b1d14608a575b600080fd5b60606366b2e15081565b60405190815260200160405180910390f35b60606a076496d888478bcef0000081565b6060601081565b606060078156fea2646970667358221220a648419f8e7655f211e409ecd7ccea46b8ab517986701d1c4ef62fc40ba53e5464736f6c634300081b0033";

type AllocationLibConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AllocationLibConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AllocationLib__factory extends ContractFactory {
  constructor(...args: AllocationLibConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      AllocationLib & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): AllocationLib__factory {
    return super.connect(runner) as AllocationLib__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AllocationLibInterface {
    return new Interface(_abi) as AllocationLibInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): AllocationLib {
    return new Contract(address, _abi, runner) as unknown as AllocationLib;
  }
}
