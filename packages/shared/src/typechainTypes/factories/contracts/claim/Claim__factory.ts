/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type { Claim, ClaimInterface } from "../../../contracts/claim/Claim";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "target",
        type: "address",
      },
    ],
    name: "AddressEmptyCode",
    type: "error",
  },
  {
    inputs: [],
    name: "AddressZero",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "blockHash",
        type: "bytes32",
      },
    ],
    name: "BlockHashNotExists",
    type: "error",
  },
  {
    inputs: [],
    name: "ClaimAggregatorMismatch",
    type: "error",
  },
  {
    inputs: [],
    name: "ClaimChainVerificationFailed",
    type: "error",
  },
  {
    inputs: [],
    name: "ClaimProofVerificationFailed",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "implementation",
        type: "address",
      },
    ],
    name: "ERC1967InvalidImplementation",
    type: "error",
  },
  {
    inputs: [],
    name: "ERC1967NonPayable",
    type: "error",
  },
  {
    inputs: [],
    name: "FailedCall",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidDepositAmount",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidInitialization",
    type: "error",
  },
  {
    inputs: [],
    name: "NotFinishedPeriod",
    type: "error",
  },
  {
    inputs: [],
    name: "NotInitializing",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "OwnableInvalidOwner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "OwnableUnauthorizedAccount",
    type: "error",
  },
  {
    inputs: [],
    name: "UUPSUnauthorizedCallContext",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "slot",
        type: "bytes32",
      },
    ],
    name: "UUPSUnsupportedProxiableUUID",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "period",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "depositAmount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "contribution",
        type: "uint256",
      },
    ],
    name: "ContributionRecorded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "withdrawalHash",
        type: "bytes32",
      },
      {
        indexed: true,
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        components: [
          {
            internalType: "address",
            name: "recipient",
            type: "address",
          },
          {
            internalType: "uint32",
            name: "tokenIndex",
            type: "uint32",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "bytes32",
            name: "nullifier",
            type: "bytes32",
          },
        ],
        indexed: false,
        internalType: "struct WithdrawalLib.Withdrawal",
        name: "withdrawal",
        type: "tuple",
      },
    ],
    name: "DirectWithdrawalQueued",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint64",
        name: "version",
        type: "uint64",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "implementation",
        type: "address",
      },
    ],
    name: "Upgraded",
    type: "event",
  },
  {
    inputs: [],
    name: "UPGRADE_INTERFACE_VERSION",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getAllocationConstants",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "startTimestamp",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "periodInterval",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "genesisTimestamp",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "phase0RewardPerDay",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "numPhases",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "phase0Period",
            type: "uint256",
          },
        ],
        internalType: "struct AllocationLib.AllocationConstants",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "periodNumber",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "getAllocationInfo",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "totalContribution",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "allocationPerPeriod",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "userContribution",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "userAllocation",
            type: "uint256",
          },
        ],
        internalType: "struct AllocationLib.AllocationInfo",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCurrentPeriod",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_admin",
        type: "address",
      },
      {
        internalType: "address",
        name: "_scrollMessenger",
        type: "address",
      },
      {
        internalType: "address",
        name: "_claimVerifier",
        type: "address",
      },
      {
        internalType: "address",
        name: "_liquidity",
        type: "address",
      },
      {
        internalType: "address",
        name: "_rollup",
        type: "address",
      },
      {
        internalType: "address",
        name: "_contribution",
        type: "address",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "proxiableUUID",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "period",
        type: "uint256",
      },
      {
        internalType: "address[]",
        name: "users",
        type: "address[]",
      },
    ],
    name: "relayClaims",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "recipient",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "bytes32",
            name: "nullifier",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "blockHash",
            type: "bytes32",
          },
          {
            internalType: "uint32",
            name: "blockNumber",
            type: "uint32",
          },
        ],
        internalType: "struct ChainedClaimLib.ChainedClaim[]",
        name: "claims",
        type: "tuple[]",
      },
      {
        components: [
          {
            internalType: "bytes32",
            name: "lastClaimHash",
            type: "bytes32",
          },
          {
            internalType: "address",
            name: "claimAggregator",
            type: "address",
          },
        ],
        internalType: "struct ClaimProofPublicInputsLib.ClaimProofPublicInputs",
        name: "publicInputs",
        type: "tuple",
      },
      {
        internalType: "bytes",
        name: "proof",
        type: "bytes",
      },
    ],
    name: "submitClaimProof",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newImplementation",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "upgradeToAndCall",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a06040523060805234801561001457600080fd5b5061001d610022565b6100d4565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000900460ff16156100725760405163f92ee8a960e01b815260040160405180910390fd5b80546001600160401b03908116146100d15780546001600160401b0319166001600160401b0390811782556040519081527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b50565b608051611f876100fd60003960008181610ec201528181610eeb01526110310152611f876000f3fe6080604052600436106100a75760003560e01c8063715018a611610064578063715018a6146101915780638da5cb5b146101a6578063ad3cb1cc146101ed578063cc1966b21461022b578063cc2a9a5b1461028c578063f2fde38b146102ac57600080fd5b8063086146d2146100ac5780632c36a5d4146100d457806337a38d31146100f65780634f1ef2861461011657806352d1902d1461012957806362a668531461013e575b600080fd5b3480156100b857600080fd5b506100c16102cc565b6040519081526020015b60405180910390f35b3480156100e057600080fd5b506100f46100ef366004611846565b6102dd565b005b34801561010257600080fd5b506100f46101113660046118fe565b6104de565b6100f46101243660046119da565b61078c565b34801561013557600080fd5b506100c16107ab565b34801561014a57600080fd5b5061015e610159366004611a83565b6107c8565b6040516100cb91908151815260208083015190820152604080830151908201526060918201519181019190915260800190565b34801561019d57600080fd5b506100f4610808565b3480156101b257600080fd5b507f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546040516001600160a01b0390911681526020016100cb565b3480156101f957600080fd5b5061021e604051806040016040528060058152602001640352e302e360dc1b81525081565b6040516100cb9190611aff565b34801561023757600080fd5b5061024061081c565b6040516100cb9190600060c082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015292915050565b34801561029857600080fd5b506100f46102a7366004611b12565b61085f565b3480156102b857600080fd5b506100f46102c7366004611b86565b610ac4565b60006102d86005610b02565b905090565b6102ea8585858585610b1f565b6000805b8581101561043c57600087878381811061030a5761030a611ba1565b905060a002018036038101906103209190611bb7565b60408082015160009081526008602052205490915060ff16156103435750610434565b60408181015160009081526008602052818120805460ff191660011790556002546080840151925163d2b210a160e01b815263ffffffff909316600484015290916001600160a01b039091169063d2b210a190602401602060405180830381865afa1580156103b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103da9190611c3f565b905081606001518114610411578160600151604051630631b89b60e41b815260040161040891815260200190565b60405180910390fd5b8151602083015161042491600591610c92565b8361042e81611c6e565b94505050505b6001016102ee565b506004546001600160a01b031663f099f9f57fda5ef0dc178ac91b88a75e00c784aa6cda7295d02eebaec5c697f2b7ca57cdba336040516001600160e01b031960e085901b16815260048101929092526001600160a01b0316602482015260448101849052606401600060405180830381600087803b1580156104be57600080fd5b505af11580156104d2573d6000803e3d6000fd5b50505050505050505050565b826104e96005610b02565b1161050757604051635c6f5fd960e01b815260040160405180910390fd5b6000816001600160401b0381111561052157610521611994565b60405190808252806020026020018201604052801561057357816020015b60408051608081018252600080825260208083018290529282018190526060820152825260001990920191018161053f5790505b50905060005b815181101561068657600084848381811061059657610596611ba1565b90506020020160208101906105ab9190611b86565b905060006105bb60058884610d5c565b905060008742846040516020016105f293929190928352602083019190915260601b6001600160601b031916604082015260540190565b60408051601f1981840301815282825280516020918201206080840183526001600160a01b0387168085526001928501929092529183018590526060830182905290925061063f82610dc3565b7fdbe674c66915823ad8cb90cac7eb482e951adec0311c9cf091da19de527ee9358360405161066e9190611c87565b60405180910390a35050600190920191506105799050565b5060408051600080825260208201909252639d6a54cb60e01b906106af90849060448101611cc1565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915290506106ec81610e3b565b6004546001600160a01b031663f099f9f57fb5676ab224a46e60d2dabad66cec9aca97207e56cceb702167f49c074d12052c3360405160e084901b6001600160e01b031916815260048101929092526001600160a01b0316602482015260448101869052606401600060405180830381600087803b15801561076d57600080fd5b505af1158015610781573d6000803e3d6000fd5b505050505050505050565b610794610eb7565b61079d82610f5c565b6107a78282610f64565b5050565b60006107b5611026565b50600080516020611f3283398151915290565b6107f36040518060800160405280600081526020016000815260200160008152602001600081525090565b6107ff6005848461106f565b90505b92915050565b610810611113565b61081a600061116e565b565b6108556040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6102d860056111df565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff1615906001600160401b03166000811580156108a45750825b90506000826001600160401b031660011480156108c05750303b155b9050811580156108ce575080155b156108ec5760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff19166001178555831561091657845460ff60401b1916600160401b1785555b6001600160a01b038b1661093d57604051639fabe1c160e01b815260040160405180910390fd5b6001600160a01b038a1661096457604051639fabe1c160e01b815260040160405180910390fd5b6001600160a01b03891661098b57604051639fabe1c160e01b815260040160405180910390fd5b6001600160a01b0388166109b257604051639fabe1c160e01b815260040160405180910390fd5b6001600160a01b0387166109d957604051639fabe1c160e01b815260040160405180910390fd5b6001600160a01b038616610a0057604051639fabe1c160e01b815260040160405180910390fd5b610a098b61125a565b610a1161126b565b610a1b6005611273565b600180546001600160a01b03199081166001600160a01b038d8116919091179092556000805482168c84161790556002805482168a841617905560048054821689841617905560038054909116918a169190911790558315610ab757845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b5050505050505050505050565b610acc611113565b6001600160a01b038116610af657604051631e4fbdf760e01b815260006004820152602401610408565b610aff8161116e565b50565b8054600090610e1090610b159042611d7b565b6108029190611d8e565b610b8883600001358686808060200260200160405190810160405280939291908181526020016000905b82821015610b7557610b6660a08302860136819003810190611bb7565b81526020019060010190610b49565b505050505061128e90919063ffffffff16565b610ba55760405163ec196f1360e01b815260040160405180910390fd5b33610bb66040850160208601611b86565b6001600160a01b031614610bdd576040516343c30a7760e01b815260040160405180910390fd5b6000546001600160a01b0316637e4f7a8a8383610c0f610c0a610c05368a90038a018a611db0565b6112eb565b61131e565b6040518463ffffffff1660e01b8152600401610c2d93929190611e05565b602060405180830381865afa158015610c4a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c6e9190611e80565b610c8b57604051631f53b29360e01b815260040160405180910390fd5b5050505050565b6000610c9d84610b02565b90506000610caa83611396565b9050808560010160008481526020019081526020016000206000828254610cd19190611ea2565b9091555050600082815260028601602090815260408083206001600160a01b038816845290915281208054839290610d0a908490611ea2565b909155505060408051848152602081018390526001600160a01b0386169184917f8d0cf479602fd3cf00c7e5f661984c44659a827edb5f23cd85094cdc942f4649910160405180910390a35050505050565b6000610d6784610b02565b8310610d8657604051635c6f5fd960e01b815260040160405180910390fd5b6000610d93858585611413565b600085815260028701602090815260408083206001600160a01b03881684529091528120559150505b9392505050565b60008160000151826020015183604001518460600151604051602001610e1e949392919060609490941b6001600160601b031916845260e09290921b6001600160e01b03191660148401526018830152603882015260580190565b604051602081830303815290604052805190602001209050919050565b600154600354604051635f7b157760e01b8152600092600019926001600160a01b0391821692635f7b1577928692610e80929116908390899088903390600401611eb5565b6000604051808303818588803b158015610e9957600080fd5b505af1158015610ead573d6000803e3d6000fd5b5050505050505050565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161480610f3e57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610f32600080516020611f32833981519152546001600160a01b031690565b6001600160a01b031614155b1561081a5760405163703e46dd60e11b815260040160405180910390fd5b610aff611113565b816001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015610fbe575060408051601f3d908101601f19168201909252610fbb91810190611c3f565b60015b610fe657604051634c9c8ce360e01b81526001600160a01b0383166004820152602401610408565b600080516020611f32833981519152811461101757604051632a87526960e21b815260048101829052602401610408565b6110218383611488565b505050565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461081a5760405163703e46dd60e11b815260040160405180910390fd5b61109a6040518060800160405280600081526020016000815260200160008152602001600081525090565b6000838152600185016020526040812054906110b686866114de565b600086815260028801602090815260408083206001600160a01b03891684529091528120549192506110e9888888611413565b60408051608081018252958652602086019490945292840191909152506060820152949350505050565b336111457f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031690565b6001600160a01b03161461081a5760405163118cdaa760e01b8152336004820152602401610408565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930080546001600160a01b031981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b6112186040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525090565b506040805160c08101825291548252610e1060208301526366b2e150908201526a076496d888478bcef00000606082015260076080820152601060a082015290565b6112626114fd565b610aff81611546565b61081a6114fd565b610e106112808142611d8e565b61128a9190611efe565b9055565b600080805b84518110156112cf5760008582815181106112b0576112b0611ba1565b602002602001015190506112c4818461154e565b925050600101611293565b508281146112e1576000915050610802565b5060019392505050565b600081600001518260200151604051602001610e1e92919091825260601b6001600160601b031916602082015260340190565b604080516008808252610120820190925260609160009190602082016101008036833701905050905060005b600881101561138f5761135e816020611efe565b84901b60e01c63ffffffff1682828151811061137c5761137c611ba1565b602090810291909101015260010161134a565b5092915050565b60008167016345785d8a0000036113af57506001919050565b81670de0b6b3a7640000036113c657506004919050565b81678ac7230489e80000036113dd57506009919050565b8168056bc75e2d63100000036113f557506010919050565b60405163fe9ba5cd60e01b815260040160405180910390fd5b919050565b6000828152600184016020526040812054810361143257506000610dbc565b60008381526001850160209081526040808320546002880183528184206001600160a01b03871685529092529091205461146c86866114de565b6114769190611efe565b6114809190611d8e565b949350505050565b611491826115da565b6040516001600160a01b038316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a28051156114d657611021828261163f565b6107a76116b5565b6000806114eb84846116d4565b905062015180611476610e1083611efe565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0054600160401b900460ff1661081a57604051631afcd79f60e31b815260040160405180910390fd5b610acc6114fd565b600081836000015184602001518560400151866060015187608001516040516020016115bc9695949392919095865260609490941b6001600160601b031916602086015260348501929092526054840152607483015260e01b6001600160e01b031916609482015260980190565b60405160208183030381529060405280519060200120905092915050565b806001600160a01b03163b60000361161057604051634c9c8ce360e01b81526001600160a01b0382166004820152602401610408565b600080516020611f3283398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6060600080846001600160a01b03168460405161165c9190611f15565b600060405180830381855af49150503d8060008114611697576040519150601f19603f3d011682016040523d82523d6000602084013e61169c565b606091505b50915091506116ac858383611761565b95945050505050565b341561081a5760405163b398979f60e01b815260040160405180910390fd5b600080620151806366b2e1506116ea8583611efe565b86546116f69190611ea2565b6117009190611d7b565b61170a9190611d8e565b90506a076496d888478bcef0000060005b6007811015611755576010811b8084101561173c5782945050505050610802565b6117468185611d7b565b935050600191821c910161171b565b50600095945050505050565b60608261177657611771826117bd565b610dbc565b815115801561178d57506001600160a01b0384163b155b156117b657604051639996b31560e01b81526001600160a01b0385166004820152602401610408565b5080610dbc565b8051156117cd5780518082602001fd5b60405163d6bda27560e01b815260040160405180910390fd5b6000604082840312156117f857600080fd5b50919050565b60008083601f84011261181057600080fd5b5081356001600160401b0381111561182757600080fd5b60208301915083602082850101111561183f57600080fd5b9250929050565b60008060008060006080868803121561185e57600080fd5b85356001600160401b0381111561187457600080fd5b8601601f8101881361188557600080fd5b80356001600160401b0381111561189b57600080fd5b88602060a0830284010111156118b057600080fd5b6020918201965094506118c690889088016117e6565b925060608601356001600160401b038111156118e157600080fd5b6118ed888289016117fe565b969995985093965092949392505050565b60008060006040848603121561191357600080fd5b8335925060208401356001600160401b0381111561193057600080fd5b8401601f8101861361194157600080fd5b80356001600160401b0381111561195757600080fd5b8660208260051b840101111561196c57600080fd5b939660209190910195509293505050565b80356001600160a01b038116811461140e57600080fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156119d2576119d2611994565b604052919050565b600080604083850312156119ed57600080fd5b6119f68361197d565b915060208301356001600160401b03811115611a1157600080fd5b8301601f81018513611a2257600080fd5b80356001600160401b03811115611a3b57611a3b611994565b611a4e601f8201601f19166020016119aa565b818152866020838501011115611a6357600080fd5b816020840160208301376000602083830101528093505050509250929050565b60008060408385031215611a9657600080fd5b82359150611aa66020840161197d565b90509250929050565b60005b83811015611aca578181015183820152602001611ab2565b50506000910152565b60008151808452611aeb816020860160208601611aaf565b601f01601f19169290920160200192915050565b6020815260006107ff6020830184611ad3565b60008060008060008060c08789031215611b2b57600080fd5b611b348761197d565b9550611b426020880161197d565b9450611b506040880161197d565b9350611b5e6060880161197d565b9250611b6c6080880161197d565b9150611b7a60a0880161197d565b90509295509295509295565b600060208284031215611b9857600080fd5b6107ff8261197d565b634e487b7160e01b600052603260045260246000fd5b600060a0828403128015611bca57600080fd5b5060405160009060a081016001600160401b0381118282101715611bf057611bf0611994565b604052611bfc8461197d565b8152602084810135908201526040808501359082015260608085013590820152608084013563ffffffff81168114611c32578283fd5b6080820152949350505050565b600060208284031215611c5157600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b600060018201611c8057611c80611c58565b5060010190565b81516001600160a01b0316815260208083015163ffffffff1690820152604080830151908201526060808301519082015260808101610802565b6040808252835190820181905260009060208501906060840190835b81811015611d3357611d1d83855180516001600160a01b0316825260208082015163ffffffff169083015260408082015190830152606090810151910152565b6020939093019260809290920191600101611cdd565b50508381036020808601919091528551808352918101925085019060005b81811015611d6f578251845260209384019390920191600101611d51565b50919695505050505050565b8181038181111561080257610802611c58565b600082611dab57634e487b7160e01b600052601260045260246000fd5b500490565b60006040828403128015611dc357600080fd5b50604080519081016001600160401b0381118282101715611de657611de6611994565b60405282358152611df96020840161197d565b60208201529392505050565b60408152826040820152828460608301376000606084830101526000601f19601f8501168201606081016060848303016020850152808551808352608084019150602087019350600092505b80831015611e745783518252602082019150602084019350600183019250611e51565b50979650505050505050565b600060208284031215611e9257600080fd5b81518015158114610dbc57600080fd5b8082018082111561080257610802611c58565b60018060a01b038616815284602082015260a060408201526000611edc60a0830186611ad3565b6060830194909452506001600160a01b03919091166080909101529392505050565b808202811582820484141761080257610802611c58565b60008251611f27818460208701611aaf565b919091019291505056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbca2646970667358221220f507d3c7c6052f74a9e79b4a6f5344347ee95979ea731a6a3959df85b5b128ac64736f6c634300081b0033";

type ClaimConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ClaimConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Claim__factory extends ContractFactory {
  constructor(...args: ClaimConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      Claim & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Claim__factory {
    return super.connect(runner) as Claim__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ClaimInterface {
    return new Interface(_abi) as ClaimInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Claim {
    return new Contract(address, _abi, runner) as unknown as Claim;
  }
}
